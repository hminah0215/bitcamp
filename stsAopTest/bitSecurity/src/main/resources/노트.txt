<< spring security의 사용 >>

#pom.xml에 추가 	
	<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		
인증 : 로그인처리
인가 : 권한설정 ==> 특정서비스에 접근할 수 있는 권한
			role설정

회원의 정보를 위한 테이블을 다음과 같이 생성해요.

create table member100(
	id varchar2(20) primary key,
	pwd varchar2(100),
	name varchar2(20),
	role varchar2(20)
);

패스워드는 암호화하면 길어지기때문에 여유있게 길이를 정해줘요. 

회원 등록을 위한 기능을 추가해요.
회원 검색을 위한 기능을 추가해요.(id)
=======================================================================================================
#BoardController
/
/all/list
/insert
/admin/cmd1
				이렇게 시큐리티 설정을 할 예정
	/,/all	모든 요청은 로그인 상관없이 아무나 접근 할 수 있어요!
	/admin	모든 요청은 admin이라는 권한(role)이 있어야 사용할 수 있어요!
	그 나머지 요청은 로그인만 하면 사용할 수 있어요! 

===========================================================================================================

스프링 시큐리티는 
	패스워드가 "tiger"이면 
	그대로 검사하지 않고 암호화 하여 검사합니다.
	그래서 우리가 데이터베이스에 담을때도 암호화해서 담아야합니다.


1.	mybatis 설정, vo생성
	회원을 추가하는 메소드와 
	회원아이디를 매개변수로 받아 회원의 정보를 vo로 반환하는 메소드 
------------------------------------------------------------------------

암호화를 위한 객체를 생성해요. 
#xml
<bean id="passwordEncoder" class="PassWordEncoder"/>

#annotation, 메인application에 추가하면 된다.
@Bean
	public PasswordEncoder passwordEncoder() {
		return PasswordEncoderFactories.createDelegatingPasswordEncoder();
	}


실험을 위하여 두명의 멤버를 추가해요.
	//MemberManager.insertMember(new MemberVo
	//			("tiger",PasswordEncoderFactories.createDelegatingPasswordEncoder().encode("tiger"),"홍길동","USER"));
	//MemberManager.insertMember(new MemberVo
	//			("master",PasswordEncoderFactories.createDelegatingPasswordEncoder().encode("1234"),"곽동길","ADMIN"));

스프링 시큐리티가 로그인 인증처리 할 때 패스워드는 인코딩(암호화)하여 검사하기 때문에 
db에 추가할때는 인코딩해야함!!!!!!!!

---------------------------------------------------------------------------------

2. 시큐리티 환경설정
사용자별로 어떤 서비스를 받을 수 있는지에 대한 환경설정. 

WebSecurityConfiguerAdapter 클래스를 확장(상속) 합니다.

@Configuration		<--자동으로 스캔되어야함
@EnableWebSecurity  <--annotation기반 시큐리티 설정을 나타냄
public class SequrityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected void configure(HttpSecurity http) throws Exception {
		//super.configure(http);
		
		http.authorizeRequests() <--사용자의 요청별 권한설정을 하겠습니다.
		
			//이러한 요청은 로그인 상관없이 아무나 접근 할 수 있어요!
			.mvcMatchers("/","/all/**").permitAll()	
			//이러한 요청은 admin이라는 권한(role)이 있어야 사용할 수 있어요!
			.mvcMatchers("/admin/**").hasRole("ADMIN") 
			//그 나머지 요청은 로그인만 하면 사용할 수 있어요! 
			.anyRequest().authenticated();	
			
		http.formLogin();	//스프링 시큐리티가 제공하는 로그인폼을 사용하겠습니다.
		http.httpBasic();	//http 기본 프로토콜을 사용하겠습니다.
	}
}

----------------------------------------------------------------------------------------

3. 데이터베이스와 연동하여 사용자 설정을 해줍니다.

확장 	: 클래스를 상속
구현	: 인터페이스를 구현 

사용자 설정을 위해서는..
	스프링 시큐리티가 제공하는 인터페이스 UserDetailService를 구현합니다.(반드시 오버라이딩해야하는 메소드 존재)

*********
Service가 뭐에요? 
	Controller	:사용자 요청에 대한 처리
		Service : 사용자 요청에 따라 바로 Dao를 처리하는 것 뿐만 아니라 이것저것 처리해야할 일이 많아요.
				  이런 처리를 Controller에 넣기도 가독성이 떨어지고 
				  Dao에 넣기도 그래요. 
				  이럴때 서비스를 사용합니다.
	Dao			:DB에 엑세스
**********

===========================================================================================================
	
	**스프링 시큐리티가 제공하는 loginForm에는 다음과 같은 _csrf가 hidden으로 전달됩니다. 
		---> 이값이 오지 않으면 잘못된 접근으로 처리되어 로그인을 시도 할 수 없어요.
		
			따라서 우리가 직접 loginForm을 만드려면 시스템이 생성한 _csrf값을 읽어와서 전달해줘야합니다.
			
			만약,jsp를 쓴다면 ${_csrf} 라고 설정하면 될텐데 
				정적인 html 에서는 _csrf 값을 읽어올 수 없어요.
				
				jsp가 아닌 동적인 html을 위하여 tymeleaf를 사용합니다.
	
<input 
	name="_csrf" type="hidden" 
	value="4f9f4621-7179-43e6-9139-52942b32a5ac">

---------------------------------------------------------------------------------------

<< thymeleaf 설정 >>

<application.properties>
spring.thymeleaf.prefix=classpath:templates/
spring.thymeleaf.check-template-location=true
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML5
spring.thymeleaf.cache=false
spring.thymeleaf.order=0

<pom.xml>
<!--thymeleaf dependency설정  -->
<dependency>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-thymeleaf</artifactId>
</dependency>










